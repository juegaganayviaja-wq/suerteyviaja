<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Panel de Administrador - Gana y Viaja</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
      margin: 0;
      padding: 20px;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    h1 {
      color: #1976d2;
      text-align: center;
    }

    .search-box {
      margin: 20px 0;
      display: flex;
      gap: 10px;
    }

    .search-box input {
      flex: 1;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    .search-box button {
      padding: 10px 20px;
      background-color: #1976d2;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 10px;
      text-align: left;
      border: 1px solid #ddd;
    }

    th {
      background-color: #e3f2fd;
    }

    .btn-validar {
      padding: 5px 10px;
      background-color: #4caf50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .btn-rechazar {
      padding: 5px 10px;
      background-color: #e53935;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .ganador-popup {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      display: flex;
    }

    .ganador-content {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
      max-width: 800px;
      width: 90%;
      text-align: center;
    }

    .ganador-content h2 {
      color: #1976d2;
    }

    .descargar-btn {
      margin-top: 20px;
      padding: 10px 20px;
      background-color: #1976d2;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .email-sent {
      color: green;
      font-weight: bold;
    }

    /* Estilos para el estado */
    .estado-pendiente {
      color: orange;
      font-weight: bold;
    }

    .estado-confirmado {
      color: green;
      font-weight: bold;
    }

    .estado-rechazado {
      color: red;
      font-weight: bold;
    }
  </style>
</head>
<body>

<div class="container">
  <h1>Panel de Administrador - Gana y Viaja</h1>

  <div class="search-box">
    <input type="text" id="searchInput" placeholder="Buscar por n√∫mero, nombre o correo...">
    <button id="searchBtn">Buscar</button>
    <button id="findWinnerBtn">Encontrar Ganador</button>
  </div>

  <table id="participacionesTable">
    <thead>
      <tr>
        <th>Nombre</th>
        <th>Tel√©fono</th>
        <th>Correo</th>
        <th>N√∫meros</th>
        <th>Fecha</th>
        <th>Estado</th>
        <th>Acciones</th>
      </tr>
    </thead>
    <tbody>
      <!-- Los datos se cargar√°n aqu√≠ -->
    </tbody>
  </table>
</div>

<!-- Popup de ganador -->
<div class="ganador-popup" id="ganadorPopup" style="display:none;">
  <div class="ganador-content">
    <h2>üéâ ¬°Feliz ganador! üéâ</h2>
    <p><strong>Nombre:</strong> <span id="ganadorNombre">Nombre del ganador</span></p>
    <p><strong>N√∫mero ganador:</strong> <span id="ganadorNumero">N√∫mero</span></p>
    <p><strong>Sorteo N¬∞:</strong> <span id="ganadorSorteo">47</span></p>
    <p>¬°Disfruta un fin de semana de relax con 3 acompa√±antes!</p>
    <button class="descargar-btn" id="descargarBtn">Descargar Comprobante</button>
    <div id="emailStatus" class="email-sent"></div>
  </div>
</div>

<script>
// === CONFIGURACI√ìN ===
// URL base de tu backend (ajusta si usas otro puerto o dominio)
const API_BASE = 'https://viajaydisfruta.onrender.com';

// === OBTENER PARTICIPACIONES DESDE TU BACKEND ===
async function obtenerParticipacionesDesdeBackend() {
  try {
    const response = await fetch('https://viajaydisfruta.onrender.com/api/participaciones');
    if (response.ok) {
      return await response.json();
    } else {
      console.error('Error al obtener participaciones:', await response.json());
      return [];
    }
  } catch (error) {
    console.error('Error de red:', error);
    return [];
  }
}

// === FUNCIONES ACTUALIZADAS PARA USAR EL BACKEND ===

async function validarParticipacion(id) {
  if (!confirm('¬øEst√°s seguro de que deseas VALIDAR esta participaci√≥n?')) return;

  try {
    const response = await fetch(`${API_BASE}/api/participacion/${id}/validar`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    const data = await response.json();

    if (response.ok) {
      alert(`‚úÖ ${data.message}`);
      const participaciones = await obtenerParticipacionesDesdeBackend();
      renderizarTabla(participaciones);
    } else {
      alert(`‚ùå Error: ${data.error}`);
    }
  } catch (error) {
    console.error('Error al validar:', error);
    alert('‚ùå Error de conexi√≥n con el servidor.');
  }
}

async function rechazarParticipacion(id) {
  if (!confirm('¬øEst√°s seguro de que deseas RECHAZAR esta participaci√≥n?')) return;

  try {
    const response = await fetch(`${API_BASE}/api/participacion/${id}/rechazar`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    const data = await response.json();

    if (response.ok) {
      alert(`‚úÖ ${data.message}`);
      const participaciones = await obtenerParticipacionesDesdeBackend();
      renderizarTabla(participaciones);
    } else {
      alert(`‚ùå Error: ${data.error}`);
    }
  } catch (error) {
    console.error('Error al rechazar:', error);
    alert('‚ùå Error de conexi√≥n con el servidor.');
  }
}

// === RENDERIZAR TABLA ===
function renderizarTabla(participaciones) {
  const tbody = document.querySelector('#participacionesTable tbody');
  tbody.innerHTML = '';

  if (participaciones.length === 0) {
    tbody.innerHTML = `<tr><td colspan="7" style="text-align:center;">No hay participaciones.</td></tr>`;
    return;
  }

  participaciones.forEach(p => {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${p.nombre || ''}</td>
      <td>${p.telefono || ''}</td>
      <td>${p.correo || ''}</td>
      <td>${Array.isArray(p.numeros) ? p.numeros.join(', ') : p.numeros || ''}</td>
      <td>${p.fecha ? new Date(p.fecha).toLocaleString() : ''}</td>
      <td><span class="estado-${p.estado}">${p.estado?.charAt(0).toUpperCase() + p.estado?.slice(1) || 'Desconocido'}</span></td>
      <td>
        ${
          p.estado === 'pendiente'
            ? `
              <button class="btn-validar" onclick="validarParticipacion(${p.id})">Validar</button>
              <button class="btn-rechazar" onclick="rechazarParticipacion(${p.id})">Rechazar</button>
            `
            : `<span class="estado-${p.estado}">${p.estado?.charAt(0).toUpperCase() + p.estado?.slice(1) || 'Desconocido'}</span>`
        }
      </td>
    `;
    tbody.appendChild(tr);
  });
}

// === B√öSQUEDA Y GANADOR ===
async function buscarParticipacion() {
  const term = document.getElementById('searchInput').value.toLowerCase();
  const todas = await obtenerParticipacionesDesdeBackend();
  const filtradas = todas.filter(p =>
    (p.nombre?.toLowerCase().includes(term)) ||
    (p.telefono?.includes(term)) ||
    (p.correo?.toLowerCase().includes(term)) ||
    (Array.isArray(p.numeros) ? p.numeros.some(n => n.includes(term)) : (p.numeros?.includes(term)))
  );
  renderizarTabla(filtradas);
}

async function encontrarGanador() {
  const todas = await obtenerParticipacionesDesdeBackend();
  const confirmadas = todas.filter(p => p.estado === 'confirmado');
  if (confirmadas.length === 0) {
    alert('No hay participaciones confirmadas.');
    return;
  }
  const ganador = confirmadas[Math.floor(Math.random() * confirmadas.length)];
  const num = Array.isArray(ganador.numeros) 
    ? ganador.numeros[Math.floor(Math.random() * ganador.numeros.length)] 
    : ganador.numeros;
  
  document.getElementById('ganadorNombre').textContent = ganador.nombre || 'Desconocido';
  document.getElementById('ganadorNumero').textContent = num || 'N/A';
  document.getElementById('ganadorSorteo').textContent = '47';
  document.getElementById('ganadorPopup').style.display = 'flex';
  
  setTimeout(() => {
    document.getElementById('emailStatus').textContent = '‚úÖ Correo enviado al ganador.';
  }, 1000);
}

function descargarComprobante() {
  alert('üìÑ Comprobante descargado (simulado).');
}

// === EVENTOS ===
document.getElementById('searchBtn').addEventListener('click', buscarParticipacion);
document.getElementById('findWinnerBtn').addEventListener('click', encontrarGanador);
document.getElementById('descargarBtn').addEventListener('click', descargarComprobante);
document.getElementById('ganadorPopup').addEventListener('click', function(e) {
  if (e.target === this) {
    this.style.display = 'none';
    document.getElementById('emailStatus').textContent = '';
  }
});

// === INICIALIZAR ===
window.addEventListener('load', async () => {
  const participaciones = await obtenerParticipacionesDesdeBackend();
  renderizarTabla(participaciones);
});
</script>

</body>

</html>



sevidor



servidor


// servidor.js
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const { Resend } = require('resend');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// === CORS: dominios SIN espacios ni barras ===
app.use(cors({
  origin: [
    'http://localhost:3000',
    'https://viajaydisfruta.onrender.com',   // ‚úÖ sin espacios
    'https://suerteyviaja.netlify.app'       // ‚úÖ sin espacios
  ]
}));

app.use(express.json({ limit: '10mb' }));

// === SERVE ARCHIVOS EST√ÅTICOS (frontend) ===
app.use(express.static(path.join(__dirname, 'public')));

// === SUPABASE ===
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// === RESEND ===
const resend = new Resend(process.env.RESEND_API_KEY);

// === RUTA RA√çZ: sirve index.html ===
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// === RUTA DE SALUD ===
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'Backend funcionando.' });
});

// // === OBTENER N√öMEROS OCUPADOS ===
app.get('/api/ocupados', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('participaciones')
      .select('numeros, estado, timestamp');
    if (error) throw error;

    const TREINTA_MINUTOS = 30 * 60 * 1000;
    const ahora = Date.now();
    const ocupados = new Set(
      data
        .filter(p => 
          p.estado === 'confirmado' || 
          (p.estado === 'pendiente' && p.timestamp > ahora - TREINTA_MINUTOS)
          // ‚ö†Ô∏è Los rechazados NO se incluyen ‚Üí se liberan inmediatamente
        )
        .flatMap(p => p.numeros || [])
    );
    res.json({ numeros: [...ocupados] });
  } catch (err) {
    console.error('‚ùå Error al obtener n√∫meros ocupados:', err);
    res.status(500).json({ error: 'Error al obtener n√∫meros ocupados.' });
  }
});

// === FUNCI√ìN PARA ENVIAR CORREO ===
async function enviarCorreo(to, subject, html) {
  try {
    await resend.emails.send({
      from: 'Gana y Viaja <juegaganayviaja@gmail.com>',
      to,
      subject,
      html
    });
    console.log('‚úÖ Correo enviado a:', to);
  } catch (err) {
    console.error('‚ùå Error al enviar correo:', err);
    throw new Error('No se pudo enviar el correo.');
  }
}

// === REGISTRAR PARTICIPACI√ìN ===
app.post('/api/reservar', async (req, res) => {
  const { nombre, telefono, correo, numeros, referencia, fecha, timestamp } = req.body;
  if (!nombre || !telefono || !correo || !referencia || !fecha || !timestamp || !Array.isArray(numeros) || numeros.length < 2) {
    return res.status(400).json({ error: 'Faltan datos o n√∫meros insuficientes.' });
  }

  try {
    const { data: todas, error: errCheck } = await supabase
      .from('participaciones')
      .select('numeros');
    if (errCheck) throw errCheck;

    const ocupados = new Set(todas.flatMap(p => p.numeros || []));
    const repetidos = numeros.filter(n => ocupados.has(n));
    if (repetidos.length > 0) {
      return res.status(409).json({ error: `N√∫meros ya usados: ${repetidos.join(', ')}` });
    }

    const { data, error } = await supabase
      .from('participaciones')
      .insert([{ nombre, telefono, correo, numeros, referencia, fecha, estado: 'pendiente', timestamp }])
      .select();
    if (error) throw error;

    await enviarCorreo(
      correo,
      'üìÑ Comprobante recibido - Pendiente de validaci√≥n',
      `<h2>üìÑ ¬°Tu comprobante ha sido recibido!</h2>
       <p>Hola <strong>${nombre}</strong>,</p>
       <p>Hemos recibido tu comprobante de pago. Nuestro equipo lo est√° revisando.</p>
       <p><strong>N√∫meros jugados:</strong> ${numeros.map(n => `<span style="background:#e3f2fd; padding:4px 8px; border-radius:4px; margin:2px;">${n}</span>`).join(' ')}</p>
       <p>Te notificaremos cuando tu participaci√≥n sea validada.</p>
       <p>Gracias por participar en <strong>Gana y Viaja</strong> üéâ</p>`
    );

    res.status(201).json({ id: data[0].id });
  } catch (err) {
    console.error('‚ùå Error al registrar:', err);
    res.status(500).json({ error: 'Error al registrar participaci√≥n.' });
  }
});

// === VALIDAR PARTICIPACI√ìN ===
app.post('/api/participacion/:id/validar', async (req, res) => {
  const { id } = req.params;
  try {
    const { data: participacion, error: fetchError } = await supabase
      .from('participaciones')
      .select('*')
      .eq('id', id)
      .single();
    if (fetchError || !participacion) {
      return res.status(404).json({ error: 'Participaci√≥n no encontrada.' });
    }
    if (participacion.estado === 'confirmado') {
      return res.status(400).json({ error: 'Ya validada.' });
    }

    const { error: updateError } = await supabase
      .from('participaciones')
      .update({ estado: 'confirmado' })
      .eq('id', id);
    if (updateError) throw updateError;

    await enviarCorreo(
      participacion.correo,
      '‚úÖ ¬°Tu participaci√≥n ha sido validada!',
      `<h2>‚úÖ ¬°Tu participaci√≥n ha sido validada!</h2>
       <p>Hola <strong>${participacion.nombre}</strong>,</p>
       <p>Tus n√∫meros est√°n confirmados:</p>
       <p><strong>N√∫meros:</strong> ${participacion.numeros.map(n => `<span style="background:#1976d2; color:white; padding:4px 8px; border-radius:4px; margin:2px;">${n}</span>`).join(' ')}</p>
       <p>¬°Mucha suerte en el sorteo!</p>
       <p>Equipo de <strong>Gana y Viaja</strong></p>`
    );

    res.json({ success: true, message: 'Participaci√≥n validada.' });
  } catch (err) {
    console.error('‚ùå Error al validar:', err);
    res.status(500).json({ error: 'Error al validar la participaci√≥n.' });
  }
});

// === RECHAZAR PARTICIPACI√ìN ===
app.post('/api/participacion/:id/rechazar', async (req, res) => {
  const { id } = req.params;
  try {
    const { data: participacion, error: fetchError } = await supabase
      .from('participaciones')
      .select('*')
      .eq('id', id)
      .single();
    if (fetchError || !participacion) {
      return res.status(404).json({ error: 'Participaci√≥n no encontrada.' });
    }
    if (participacion.estado === 'confirmado') {
      return res.status(400).json({ error: 'No se puede rechazar una participaci√≥n ya validada.' });
    }

    const { error: updateError } = await supabase
      .from('participaciones')
      .update({ estado: 'rechazado' })
      .eq('id', id);
    if (updateError) throw updateError;

    await enviarCorreo(
      participacion.correo,
      '‚ö†Ô∏è Tu participaci√≥n no pudo ser validada',
      `<h2>‚ö†Ô∏è Tu participaci√≥n no pudo ser validada</h2>
       <p>Hola <strong>${participacion.nombre}</strong>,</p>
       <p>Lamentamos informarte que tu comprobante no pudo ser verificado.</p>
       <p>Si crees que es un error, env√≠a nuevamente el comprobante desde la p√°gina web.</p>
       <p>Gracias por tu inter√©s.</p>
       <p>Equipo de <strong>Gana y Viaja</strong></p>`
    );

    res.json({ success: true, message: 'Participaci√≥n rechazada.' });
  } catch (err) {
    console.error('‚ùå Error al rechazar:', err);
    res.status(500).json({ error: 'Error al rechazar la participaci√≥n.' });
  }
});

// === MANEJO DE ERRORES GLOBAL ===
app.use((err, req, res, next) => {
  console.error('Error no capturado:', err);
  res.status(500).json({ error: 'Error interno del servidor.' });
});

// === OBTENER TODAS LAS PARTICIPACIONES (para admin) ===
app.get('/api/participaciones', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('participaciones')
      .select('*')
      .order('timestamp', { ascending: false });
    if (error) throw error;
    res.json(data);
  } catch (err) {
    console.error('‚ùå Error al obtener participaciones:', err);
    res.status(500).json({ error: 'Error al obtener participaciones.' });
  }
});

// === INICIAR SERVIDOR ===
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Backend corriendo en puerto ${PORT}`);
  console.log(`üîó URL p√∫blica: https://viajaydisfruta.onrender.com`);
});